# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2016-04-28 17:01
from __future__ import unicode_literals

import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import staff.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.')], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=10, verbose_name='姓名')),
                ('gender', models.CharField(choices=[('M', '男生'), ('F', '女生')], max_length=1, verbose_name='性別')),
                ('birthday', models.DateField(default=django.utils.timezone.now, verbose_name='出生年月日')),
                ('idno', models.CharField(max_length=10, verbose_name='身份證字號')),
                ('role', models.CharField(blank=True, choices=[('就輔組', '就輔組'), ('行政組 - 總召', '行政組 - 總召'), ('行政組 - 副召', '行政組 - 副召'), ('行政組 - 執秘', '行政組 - 執秘'), ('廠聯組 - 組長', '廠聯組 - 組長'), ('廠聯組 - 組員', '廠聯組 - 組員'), ('設計組 - 組長', '設計組 - 組長'), ('設計組 - 組員', '設計組 - 組員'), ('活動組 - 組長', '活動組 - 組長'), ('活動組 - 組員', '活動組 - 組員'), ('資訊組 - 組長', '資訊組 - 組長'), ('資訊組 - 組員', '資訊組 - 組員'), ('專刊組 - 組長', '專刊組 - 組長'), ('專刊組 - 組員', '專刊組 - 組員')], max_length=10, verbose_name='職位')),
                ('mobile', models.CharField(help_text='格式: 0912-345678', max_length=12, validators=[staff.models.validate_mobile], verbose_name='手機')),
                ('fb_url', models.URLField(default='', verbose_name='FB個人首頁連結')),
                ('account', models.CharField(help_text='必需為自己的名字', max_length=15, verbose_name='郵局或玉山帳號')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'staff',
                'managed': True,
                'verbose_name_plural': 'OpenHouse 工作人員',
                'verbose_name': 'OpenHouse 工作人員',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
